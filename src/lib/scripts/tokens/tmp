//**************************************************//
//** Package imports **//
//**************************************************//
import { ethers } from 'ethers';

//**************************************************//
//** Library imports **//
//**************************************************//
import { AppError } from '$lib/types/AppError';
import type { PairReserves } from '$lib/types/tokens/PairReserves';
import type { TokenInfo } from '$lib/types/tokens/Token';
import getBrowserProvider from '$lib/scripts/helpers/getBrowserProvider';
import getPairAddress from '$lib/scripts/tokens/getPairAddress';
import routerAbi from '$lib/constants/abi/DexerV2Router';

const getPairReserves = async (
	token1Info: TokenInfo,
	token2Info: TokenInfo,
	factoryAddr: string,
	routerAddr: string
): Promise<PairReserves | null> => {
	try {
		const provider: ethers.BrowserProvider = getBrowserProvider();

		const pairAddr: string = await getPairAddress(
			factoryAddr,
			token1Info.address,
			token2Info.address,
			provider
		);

		console.log(`Selected pair address: ${pairAddr}`);

		if (pairAddr === ethers.ZeroAddress) {
			return null;
		}

		const routerContract: ethers.Contract = new ethers.Contract(routerAddr, routerAbi, provider);

		const reserves = await routerContract.getReserves(token1Info.address, token2Info.address);

		return { reserve1: reserves[0], reserve2: reserves[1] };
	} catch (e: any) {
		throw new AppError('Failed to fetch pair reserves.', e.toString());
	}
};

export default getPairReserves;
